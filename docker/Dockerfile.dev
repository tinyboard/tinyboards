# Multi-stage Dockerfile optimized for development
# Features: Fast rebuilds, dependency caching, security best practices

ARG RUST_VERSION=1.82
ARG DEBIAN_VERSION=bookworm

# Build stage with aggressive caching
FROM rust:${RUST_VERSION}-slim-${DEBIAN_VERSION} as builder

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create build user for security
RUN groupadd --gid 10001 builder && \
    useradd --uid 10001 --gid builder --create-home builder

# Setup Rust environment for faster builds
USER builder
WORKDIR /home/builder/build

# Configure cargo for better caching and performance
RUN mkdir -p .cargo && echo '[net]\ngit-fetch-with-cli = true\n[build]\nincremental = true\n[target.x86_64-unknown-linux-gnu]\nlinker = "clang"\nrustflags = ["-C", "link-arg=-fuse-ld=lld"]' > .cargo/config.toml

# Copy dependency manifests first for optimal caching
COPY --chown=builder:builder Cargo.toml Cargo.lock ./
COPY --chown=builder:builder crates/utils/Cargo.toml ./crates/utils/
COPY --chown=builder:builder crates/db/Cargo.toml ./crates/db/
COPY --chown=builder:builder crates/api/Cargo.toml ./crates/api/

# Handle potential Cargo.lock version mismatch
RUN cargo --version && \
    if ! cargo tree > /dev/null 2>&1; then \
        echo "Regenerating Cargo.lock due to version mismatch..." && \
        rm -f Cargo.lock && \
        cargo generate-lockfile; \
    fi

# Create dummy source files to cache dependencies
RUN mkdir -p src crates/utils/src crates/db/src crates/api/src && \
    echo "fn main() {}" > src/main.rs && \
    echo "pub fn dummy() {}" > src/lib.rs && \
    echo "pub fn dummy() {}" > crates/utils/src/lib.rs && \
    echo "pub fn dummy() {}" > crates/db/src/lib.rs && \
    echo "pub fn dummy() {}" > crates/api/src/lib.rs

# Build dependencies (this layer gets cached until Cargo.toml changes)
RUN cargo build --release

# Remove dummy files and compiled artifacts
RUN rm -rf src/ crates/ target/release/deps/tinyboards_server* target/release/tinyboards_server*

# Copy real source code
COPY --chown=builder:builder src ./src
COPY --chown=builder:builder crates ./crates
COPY --chown=builder:builder migrations ./migrations
COPY --chown=builder:builder config ./config
COPY --chown=builder:builder diesel.toml ./

# Build the actual application
RUN cargo build --release

# Strip binary to reduce size
RUN strip target/release/tinyboards_server

# Runtime stage with minimal dependencies
FROM debian:${DEBIAN_VERSION}-slim as runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libpq5 \
    libssl3 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean

# Create application user
RUN groupadd --gid 10001 app && \
    useradd --uid 10001 --gid app --create-home app --shell /sbin/nologin

# Create necessary directories with correct permissions
RUN mkdir -p /app/media /config && \
    chown -R app:app /app /config

# Switch to non-root user
USER app
WORKDIR /app

# Copy binary and configuration from builder
COPY --from=builder --chown=app:app /home/builder/build/target/release/tinyboards_server ./tinyboards
COPY --from=builder --chown=app:app /home/builder/build/config/defaults.hjson /config/defaults.hjson

# Apply development-specific configuration
RUN sed -i 's/unset/localhost/g' /config/defaults.hjson

# Health check for development monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8536/ || exit 1

# Expose port
EXPOSE 8536

# Use exec form for proper signal handling
CMD ["./tinyboards"]
