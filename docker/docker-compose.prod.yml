version: '3.8'

# Production-optimized Docker Compose configuration
# Features: security hardening, resource limits, monitoring, high availability

# Configuration for production

services:
  # Init container to fix volume permissions
  volume-permissions:
    image: alpine:latest
    container_name: tinyboards_volume_permissions
    volumes:
      - media_uploads:/opt/tinyboards/media
      - backend_logs:/opt/tinyboards/logs
    command: [
      "sh", "-c",
      "chown -R 1000:1000 /opt/tinyboards/media /opt/tinyboards/logs && chmod -R 755 /opt/tinyboards/media /opt/tinyboards/logs"
    ]
    restart: "no"

  nginx:
    image: nginx:1.25-alpine
    container_name: tinyboards_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - tinyboards
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service,environment=production"
        compress: "true"
    depends_on:
      tinyboards-fe:
        condition: service_started
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    # Resource limits for nginx
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s

  tinyboards:
    image: kronusdev/tinyboards-be:latest
    container_name: tinyboards_backend_prod
    ports:
      - "127.0.0.1:8536:8536"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service,environment=production"
        compress: "true"
    environment:
      - RUST_LOG=info,tinyboards_api=info,tinyboards_db=warn
      - TB_CONFIG_LOCATION=/config/defaults.hjson
      - RUST_BACKTRACE=1
      - DATABASE_URL=postgresql://tinyboards:${POSTGRES_PASSWORD}@postgres:5432/tinyboards
      # Performance tuning
      - TOKIO_WORKER_THREADS=4
      - TOKIO_BLOCKING_THREADS=4
      # Security
      - RUST_SECURE_ZERO_MEMORY=1
    volumes:
      - ./tinyboards.hjson:/config/defaults.hjson:ro
      - media_uploads:/opt/tinyboards/media
      - backend_logs:/opt/tinyboards/logs
    networks:
      - tinyboards
    user: "1000:1000"
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8536/ || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Enhanced resource management
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 60s

  tinyboards-fe:
    image: kronusdev/tinyboards-fe:latest
    container_name: tinyboards_frontend_prod
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service,environment=production"
        compress: "true"
    environment:
      - NODE_ENV=production
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
      - NITRO_PORT=3000
      - NITRO_HOST=0.0.0.0
      - NUXT_PUBLIC_API_BASE=http://tinyboards:8536
      - NUXT_PUBLIC_DOMAIN=tinyboards:8536
      - NUXT_PUBLIC_USE_HTTPS=false
      # Performance optimizations
      - NODE_OPTIONS=--max-old-space-size=512
      - UV_THREADPOOL_SIZE=4
    volumes:
      - frontend_logs:/app/logs
    networks:
      - tinyboards
    depends_on:
      tinyboards:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 10s

  postgres:
    image: postgres:15-alpine
    container_name: tinyboards_postgres_prod
    ports:
      - "127.0.0.1:5433:5432"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service,environment=production"
        compress: "true"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-tinyboards}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-tinyboards}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Security settings
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tinyboards
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tinyboards} -d ${POSTGRES_DB:-tinyboards}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - CHOWN
      - SETGID
      - SETUID
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/run/postgresql:noexec,nosuid,size=100m
    # Enhanced resource management for production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 60s
        monitor: 120s
      rollback_config:
        parallelism: 1
        delay: 30s
    # Production-optimized PostgreSQL configuration
    command: [
      "postgres",
      # Connection and authentication
      "-c", "max_connections=100",
      "-c", "superuser_reserved_connections=3",

      # Memory settings optimized for 2GB container
      "-c", "shared_buffers=512MB",
      "-c", "effective_cache_size=1536MB",
      "-c", "work_mem=8MB",
      "-c", "maintenance_work_mem=128MB",
      "-c", "autovacuum_work_mem=128MB",

      # WAL and checkpoint settings
      "-c", "wal_buffers=32MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "min_wal_size=2GB",
      "-c", "max_wal_size=8GB",
      "-c", "checkpoint_timeout=15min",
      "-c", "checkpoint_flush_after=256kB",

      # Query planner settings
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "seq_page_cost=1.0",

      # Parallel query settings
      "-c", "max_worker_processes=4",
      "-c", "max_parallel_workers_per_gather=2",
      "-c", "max_parallel_workers=4",
      "-c", "max_parallel_maintenance_workers=2",

      # Logging (minimal for production)
      "-c", "log_min_duration_statement=5000",
      "-c", "log_line_prefix=%t [%p]: [%l-1] user=%u,db=%d ",
      "-c", "log_checkpoints=on",
      "-c", "log_lock_waits=on",
      "-c", "log_temp_files=10MB",
      "-c", "log_autovacuum_min_duration=1000",

      # Security and performance
      "-c", "ssl=off",
      "-c", "tcp_keepalives_idle=600",
      "-c", "tcp_keepalives_interval=30",
      "-c", "tcp_keepalives_count=3",

      # Autovacuum tuning
      "-c", "autovacuum_max_workers=3",
      "-c", "autovacuum_naptime=15s",
      "-c", "autovacuum_vacuum_threshold=50",
      "-c", "autovacuum_analyze_threshold=50",
      "-c", "autovacuum_vacuum_scale_factor=0.1",
      "-c", "autovacuum_analyze_scale_factor=0.05"
    ]

  # Redis for caching and sessions (production-optimized)
  redis:
    image: redis:7-alpine
    container_name: tinyboards_redis_prod
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service,environment=production"
        compress: "true"
    volumes:
      - redis_data:/data
    networks:
      - tinyboards
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    user: "999:999"
    # Resource limits for Redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
    command: [
      "redis-server",
      # Completely disable appendonly and AOF
      "--appendonly", "no",
      "--no-appendfsync-on-rewrite", "yes",
      "--auto-aof-rewrite-percentage", "0",
      "--save", "3600", "1",
      "--save", "300", "100",
      "--save", "60", "10000",

      # Memory and performance
      "--maxmemory", "384mb",
      "--maxmemory-policy", "allkeys-lru",
      "--maxmemory-samples", "10",

      # Security
      "--protected-mode", "yes",
      "--tcp-keepalive", "300",

      # Logging (minimal for production)
      "--loglevel", "notice",

      # Performance tuning
      "--timeout", "300",
      "--tcp-backlog", "511",
      "--databases", "4",
      "--stop-writes-on-bgsave-error", "yes",

      # Explicitly set data directory
      "--dir", "/data"
    ]

  # Monitoring and alerting (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: tinyboards_prometheus_prod
  #   ports:
  #     - "127.0.0.1:9090:9090"
  #   volumes:
  #     - ./prometheus:/etc/prometheus:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - tinyboards
  #   <<: *prod-restart
  #   <<: *common-security

networks:
  tinyboards:
    driver: bridge

volumes:
  # Application data
  postgres_data:
    name: tinyboards_postgres_prod
    driver: local
  redis_data:
    name: tinyboards_redis_prod
    driver: local
  media_uploads:
    name: tinyboards_media_prod
    driver: local

  # Logs
  nginx_logs:
    name: tinyboards_nginx_logs_prod
    driver: local
  backend_logs:
    name: tinyboards_backend_logs_prod
    driver: local
  frontend_logs:
    name: tinyboards_frontend_logs_prod
    driver: local

  # Caches
  nginx_cache:
    name: tinyboards_nginx_cache_prod
    driver: local

  # Monitoring (if enabled)
  # prometheus_data:
  #   name: tinyboards_prometheus_prod
  #   driver: local